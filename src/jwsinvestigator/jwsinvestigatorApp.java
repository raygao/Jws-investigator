/*
 * jwsinvestigatorApp.java
 *
 * Created on August 30, 2007, 10:14 AM
 */

package jwsinvestigator;

import com.plumtree.server.*;
import com.plumtree.openkernel.factory.*;
import com.plumtree.xpshared.config.*;
import com.plumtree.openkernel.config.*;
import java.awt.Dimension;
import java.awt.Toolkit;

import java.util.Date;
import javax.swing.JFileChooser;
import java.io.*;
import javax.swing.table.DefaultTableModel;
import jwsinvestigator.utility.*;


/**
 *
 * @author  Raymond Gao
 */
public class jwsinvestigatorApp extends javax.swing.JFrame {
    String url;
    String username;
    String password;
    boolean wsStatus;
    DefaultTableModel resultDataTableModel = new DefaultTableModel();
    File saveFile;
    //AboutWSInvestigator abWs;
    
    //create session and search request, etc.
    IPTSession ptSession;
    IOKContext oContext;
    
    // See MSDN documentation on Configuration manager API,
    //http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=56359&SiteID=1
    //String separator = ConfigurationManager.AppSettings["separator"];
    String separator = ";";
    
    /** Creates new form jwsinvestigatorApp */
    public jwsinvestigatorApp() {
        //launch actual application
        initComponents();
    }
    
    private IPTSession Init() {
        //Server API does not support remote access. Localhost only
        //initialize and create Uri.
        //connection apiserver = new Uri(url);
        //IRemoteSession session = RemoteSessionFactory.GetExplicitLoginContext(
        //                apiserver,
        //                username,
        //                password);
        //resultBox.append( "session is: " + session + "\n";
        //String strToken =  session.GetLoginToken();
        //resultBox.append( "logintoken is: " + strToken + "\n";
        
        String configPath = ConfigPathResolver.GetOpenConfigPath();
        oContext = OKConfigFactory.createInstance(configPath, "portal");
        PortalObjectsFactory.InitLight(oContext);
        
        ptSession = PortalObjectsFactory.CreateSession();
        
        //ptSession.Reconnect(strToken); //server api does not support remote access.
        ptSession.Connect(username, password, null);
        
        return ptSession;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        saveFileChooser = new javax.swing.JFileChooser();
        selectorPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        uname = new javax.swing.JTextField();
        pwd = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        separatorTextBox = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        resultPanel = new javax.swing.JPanel();
        statusScrollPane = new javax.swing.JScrollPane();
        resultBox = new javax.swing.JTextArea();
        resultTablePane = new javax.swing.JScrollPane();
        resultTable = new javax.swing.JTable();
        objectTabbedPane = new javax.swing.JTabbedPane();
        wsPane = new javax.swing.JPanel();
        runWSButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        activeCheckBox = new javax.swing.JCheckBox();
        portletPane = new javax.swing.JPanel();
        runPortletButton = new javax.swing.JButton();
        communityPane = new javax.swing.JPanel();
        runPageSearchButton = new javax.swing.JButton();
        communityPagePane = new javax.swing.JPanel();
        runCommunityButton = new javax.swing.JButton();
        topMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        saveFileChooser.setSelectedFile(new java.io.File("C:\\csv\\ws_report.csv"));
        saveFileChooser.getAccessibleContext().setAccessibleName("Choose output File");
        saveFileChooser.getAccessibleContext().setAccessibleDescription("Choose output File");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Liquid Ice (WS Investigator)");
        getAccessibleContext().setAccessibleDescription("This is the graphic front end for the WS Investigator (Liquid Ice) in Java.");
        selectorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selector", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)));
        jLabel1.setText("Admin User Name:");

        jLabel2.setText("Password:");

        uname.setText("administrator");

        jLabel3.setText("CSV File Field Separator Char:");

        separatorTextBox.setDocument(separatorTextBox.getDocument());
        separatorTextBox.setText(";");
        separatorTextBox.setMaximumSize(new java.awt.Dimension(25, 2147483647));
        separatorTextBox.setMinimumSize(new java.awt.Dimension(25, 19));
        separatorTextBox.setName("separatorChar");
        separatorTextBox.setPreferredSize(new java.awt.Dimension(25, 19));
        separatorTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                separatorTextBoxActionPerformed(evt);
            }
        });

        jLabel4.setText("Note: Currently, Remote Access is not support, must run from the portal server.");

        org.jdesktop.layout.GroupLayout selectorPanelLayout = new org.jdesktop.layout.GroupLayout(selectorPanel);
        selectorPanel.setLayout(selectorPanelLayout);
        selectorPanelLayout.setHorizontalGroup(
            selectorPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(selectorPanelLayout.createSequentialGroup()
                .add(selectorPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(selectorPanelLayout.createSequentialGroup()
                        .add(selectorPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel2)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(selectorPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(pwd)
                            .add(uname, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))
                        .add(69, 69, 69)
                        .add(jLabel3)
                        .add(4, 4, 4)
                        .add(separatorTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(selectorPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel4)))
                .addContainerGap(285, Short.MAX_VALUE))
        );
        selectorPanelLayout.setVerticalGroup(
            selectorPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(selectorPanelLayout.createSequentialGroup()
                .add(selectorPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(uname, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3)
                    .add(separatorTextBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(selectorPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(pwd, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 17, Short.MAX_VALUE)
                .add(jLabel4))
        );

        resultPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Result", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)));
        resultBox.setColumns(20);
        resultBox.setRows(5);
        statusScrollPane.setViewportView(resultBox);

        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultTablePane.setViewportView(resultTable);
        resultTable.getAccessibleContext().setAccessibleName("resultTable");
        resultTable.getAccessibleContext().setAccessibleDescription("resultTable is a JTable.");

        org.jdesktop.layout.GroupLayout resultPanelLayout = new org.jdesktop.layout.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(resultPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(resultPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(resultTablePane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)
                    .add(statusScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)))
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, resultPanelLayout.createSequentialGroup()
                .add(resultTablePane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(statusScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 116, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        objectTabbedPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "Portal Object Type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)), "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12)));
        wsPane.setName("Web Services");
        runWSButton.setText("Run");
        runWSButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runWSButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Web Services Status:");

        activeCheckBox.setText("Show only Active WS (Checked) / Show All WS (Unchecked - Default)");
        activeCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        activeCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout wsPaneLayout = new org.jdesktop.layout.GroupLayout(wsPane);
        wsPane.setLayout(wsPaneLayout);
        wsPaneLayout.setHorizontalGroup(
            wsPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(wsPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(wsPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(runWSButton)
                    .add(wsPaneLayout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(activeCheckBox)))
                .addContainerGap(388, Short.MAX_VALUE))
        );
        wsPaneLayout.setVerticalGroup(
            wsPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, wsPaneLayout.createSequentialGroup()
                .add(30, 30, 30)
                .add(wsPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(activeCheckBox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 21, Short.MAX_VALUE)
                .add(runWSButton)
                .add(20, 20, 20))
        );
        objectTabbedPane.addTab("Web Services", wsPane);

        runPortletButton.setText("Run");
        runPortletButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runPortletButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout portletPaneLayout = new org.jdesktop.layout.GroupLayout(portletPane);
        portletPane.setLayout(portletPaneLayout);
        portletPaneLayout.setHorizontalGroup(
            portletPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(portletPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(runPortletButton)
                .addContainerGap(791, Short.MAX_VALUE))
        );
        portletPaneLayout.setVerticalGroup(
            portletPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, portletPaneLayout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .add(runPortletButton)
                .add(22, 22, 22))
        );
        objectTabbedPane.addTab("Portlet", portletPane);

        runPageSearchButton.setText("Run");
        runPageSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runPageSearchButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout communityPaneLayout = new org.jdesktop.layout.GroupLayout(communityPane);
        communityPane.setLayout(communityPaneLayout);
        communityPaneLayout.setHorizontalGroup(
            communityPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(communityPaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(runPageSearchButton)
                .addContainerGap(791, Short.MAX_VALUE))
        );
        communityPaneLayout.setVerticalGroup(
            communityPaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, communityPaneLayout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .add(runPageSearchButton)
                .add(19, 19, 19))
        );
        objectTabbedPane.addTab("Pages", communityPane);

        runCommunityButton.setText("Run");
        runCommunityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCommunityButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout communityPagePaneLayout = new org.jdesktop.layout.GroupLayout(communityPagePane);
        communityPagePane.setLayout(communityPagePaneLayout);
        communityPagePaneLayout.setHorizontalGroup(
            communityPagePaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(communityPagePaneLayout.createSequentialGroup()
                .addContainerGap()
                .add(runCommunityButton)
                .addContainerGap(791, Short.MAX_VALUE))
        );
        communityPagePaneLayout.setVerticalGroup(
            communityPagePaneLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, communityPagePaneLayout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .add(runCommunityButton)
                .add(19, 19, 19))
        );
        objectTabbedPane.addTab("Community", communityPagePane);

        topMenuBar.setName("fileMenu");
        fileMenu.setText("File");
        fileMenu.setName("fileMenu");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Save As");
        saveAsMenuItem.setName("saveMenuItem");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(exitMenuItem);

        topMenuBar.add(fileMenu);

        helpMenu.setText("Help");
        helpMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMenuActionPerformed(evt);
            }
        });

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);

        topMenuBar.add(helpMenu);

        setJMenuBar(topMenuBar);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, resultPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, objectTabbedPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 881, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, selectorPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(selectorPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(objectTabbedPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(resultPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        About about = new About();
        about.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed
    
    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        this.saveFileChooser.setApproveButtonText("Select");
        int returnVal = this.saveFileChooser.showDialog(this, null);
        
        if(returnVal != JFileChooser.APPROVE_OPTION) {
            resultBox.append("You have not choosed a valid file.");
            return;
        }
        
//        System.out.println("You chose to open this file: " +
//                saveFileChooser.getSelectedFile().getName());
//
        saveFile = this.saveFileChooser.getSelectedFile();
        resultBox.append("Saving file: " + saveFile);
        resultBox.append("Separator for CSV is: " + separator + "\n");
        
        StringBuffer sbCSV = new StringBuffer();
        //generate headings in the csv file.
        int columnCount = resultDataTableModel.getColumnCount();
        for (int i=0; i < columnCount; i++ ) {
            sbCSV.append(resultDataTableModel.getColumnName(i) + separator);
        }
        sbCSV.append("\n");
        
        //build contents
        int rowCount = resultDataTableModel.getRowCount();
        
        for (int j=0; j < rowCount; j++) {
            for (int x = 0; x < columnCount; x++) {
                //To address empty cells
                Object to = resultDataTableModel.getValueAt(j,x);
                String tmp = "";
                if (to != null)
                    tmp = to.toString();
                
                sbCSV.append(tmp);
                if ((x + 1) != columnCount) {
                    sbCSV.append(separator);
                }
            }
            sbCSV.append("\n");
        }
        
        
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter(saveFile));
            out.write(sbCSV.toString());
            out.close();
        } catch (IOException e) {
        }
        
    }//GEN-LAST:event_saveAsMenuItemActionPerformed
    
    private void pageSearchBackgroundWorker_DoWork() {
        Date start = new Date();
        resultBox.append("--------Searching portlets " + start + "--------------------\n");
        try {
            IPTSession ptSession = Init();
            
            ////get a PTObjectInfoManager for webservice info look up.
            CommunityPageInfoMgr communityPagetInfoMgr = (CommunityPageInfoMgr)InfoMgrFactory.getMgr(Constants.COMMUNITYPAGE, ptSession);
            resultDataTableModel = communityPagetInfoMgr.getAllCommunityPagesInfo();
            
            resultTable.setModel(resultDataTableModel);
            resultTable.repaint();
            
        } catch (Exception ee) {
            resultBox.append("Error occurred.\n");
            System.out.println("Exception occured");
            resultBox.append(ee.getMessage());
            resultBox.append(ee.getStackTrace().toString());
        }
        
        Date end = new Date();
        resultBox.append("-------- Done " + end + "--------------------\n");
        resultBox.append(" Total rows:" + resultDataTableModel.getRowCount()+ "\n");
        resultBox.append("-------- Total system time " + (end.getTime() - start.getTime()) + " milliseconds--------------------\n");
        resultBox.repaint();
    }
    
    private void runPageSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runPageSearchButtonActionPerformed
        runPageSearchButton.setEnabled(false);
        this.resultBox.append("Search started. Please wait....\n");
        
        // get input from user input boxes.
        username = uname.getText();
        password = pwd.getText();
        wsStatus = activeCheckBox.isSelected();
        
        //if (wsStatus == true)
        //    resultBox.Text += "Showing only enabled webservices.\n";
        //else
        //    resultBox.Text += "Showing all (enabled & disabled) webservices.\n";
        resultBox.repaint();
        
        pageSearchBackgroundWorker_DoWork();
        
        runPageSearchButton.setEnabled(true);
    }//GEN-LAST:event_runPageSearchButtonActionPerformed
    
    private void communitySearchBackgroundWorker_DoWork() {
        Date start = new Date();
        
        resultBox.append( "--------Searching portlets " + start + "--------------------\n");
        try {
            IPTSession ptSession = Init();
            
            ////get a PTObjectInfoManager for webservice info look up.
            CommunityInfoMgr communitytInfoMgr = (CommunityInfoMgr)InfoMgrFactory.getMgr(Constants.COMMUNITY, ptSession);
            resultDataTableModel = communitytInfoMgr.getAllCommunityInfo();
            
            resultTable.setModel(resultDataTableModel);
            resultTable.repaint();
            
        } catch (Exception ee) {
            resultBox.append("Error occurred.\n");
            System.out.println("Exception occured");
            resultBox.append(ee.getMessage());
            resultBox.append(ee.getStackTrace().toString());
        }
        
        Date end = new Date();
        resultBox.append("-------- Done " + end + "--------------------\n");
        resultBox.append(" Total rows:" + resultDataTableModel.getRowCount()+ "\n");
        resultBox.append("-------- Total system time " + (end.getTime() - start.getTime()) + " milliseconds--------------------\n");
        resultBox.repaint();
    }
    
    private void runCommunityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runCommunityButtonActionPerformed
        runCommunityButton.setEnabled(false);
        this.resultBox.append("Search started. Please wait....\n");
        
        // get input from user input boxes.
        username = uname.getText();
        password = pwd.getText();
        wsStatus = activeCheckBox.isSelected();
        
        //if (wsStatus == true)
        //    resultBox.append( "Showing only enabled webservices.\n";
        //else
        //    resultBox.append( "Showing all (enabled & disabled) webservices.\n";
        resultBox.repaint();
        
        communitySearchBackgroundWorker_DoWork();
        
        runCommunityButton.setEnabled(true);
    }//GEN-LAST:event_runCommunityButtonActionPerformed
    
    private void portletSearchBackgroundWorker_DoWork() {
        Date start = new Date();
        resultBox.append( "--------Searching portlets " + start + "--------------------\n");
        try {
            Init();
            
            ////get a PTObjectInfoManager for webservice info look up.
            PortletInfoMgr portletInfoMgr = (PortletInfoMgr)InfoMgrFactory.getMgr(Constants.PORTLET, ptSession);
            
            resultDataTableModel = (DefaultTableModel) portletInfoMgr.getAllportletsInfo(wsStatus);
            
            resultTable.setModel(resultDataTableModel);
            resultTable.repaint();
            
        } catch (Exception ee) {
            resultBox.append("Error occurred.\n");
            System.out.println("Exception occured");
            resultBox.append(ee.getMessage());
            resultBox.append(ee.getStackTrace().toString());
        }
        
        Date end = new Date();
        resultBox.append("-------- Done " + end + "--------------------\n");
        resultBox.append(" Total rows:" + resultDataTableModel.getRowCount()+ "\n");
        resultBox.append("-------- Total system time " + (end.getTime() - start.getTime()) + " milliseconds--------------------\n");
        resultBox.repaint();
        
    }
    
  private void runPortletButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runPortletButtonActionPerformed
      runPortletButton.setEnabled(false);
      this.resultBox.append("Search started. Please wait....\n");
      
      // get input from user input boxes.
      username = uname.getText();
      password = pwd.getText();
      wsStatus = activeCheckBox.isSelected();
      
      if (wsStatus == true)
          resultBox.append("Showing only portlets.\n");
      else
          resultBox.append( "Showing all (enabled & disabled) portlets.\n");
      resultBox.repaint();
      
      portletSearchBackgroundWorker_DoWork();
      
      runPortletButton.setEnabled(true);
  }//GEN-LAST:event_runPortletButtonActionPerformed
  
  private void wsSearchBackgroundWorker() {
      Date start = new Date();
      resultBox.append("--------Searching Web Services " + start + "--------------------\n");
      try {
          Init();
          ////get a PTObjectInfoManager for webservice info look up.
          WSInfoMgr wsinfoMgr = (WSInfoMgr)InfoMgrFactory.getMgr(Constants.WEBSERVICES, ptSession);
          //DataView wsDV = new DataView(wsinfoMgr.getAllCommunityPagesInfo());
          //resultBox.append( wsDV.Count;
          //resultBox.append( wsinfoMgr.getAllWebServicesInfoAsString();
          resultDataTableModel = (DefaultTableModel) wsinfoMgr.getAllWebServicesInfo(wsStatus);
          
          resultTable.setModel(resultDataTableModel);
          resultTable.repaint();
          
          //resultDataGridView.DataSource = new DataView(resultDataTableModel);
      } catch (Exception ee) {
          resultBox.append("Error occurred.\n");
          System.out.println("Exception occured");
          resultBox.append(ee.getMessage());
          resultBox.append(ee.getStackTrace().toString());
      }
      
      Date end = new Date();
      resultBox.append("-------- Done " + end + "--------------------\n");
      resultBox.append(" Total rows:" + resultDataTableModel.getRowCount()+ "\n");
      resultBox.append("-------- Total system time " + (end.getTime() - start.getTime()) + " milliseconds--------------------\n");
      resultBox.repaint();
  }
  
    private void runWSButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runWSButtonActionPerformed
        runWSButton.setEnabled(false);
        this.resultBox.append("Search started. Please wait....\n");
        
        // get input from user input boxes.
        //url = serverURL.Text;
        username = uname.getText();
        password = pwd.getText();
        wsStatus = activeCheckBox.isSelected();
        
        if (wsStatus == true)
            resultBox.append("Showing only enabled webservices.\n");
        else
            resultBox.append("Showing all (enabled & disabled) webservices.\n");
        resultBox.repaint();
        
        wsSearchBackgroundWorker();
        
        runWSButton.setEnabled(true);
    }//GEN-LAST:event_runWSButtonActionPerformed
    
    private void separatorTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_separatorTextBoxActionPerformed
        String ns = separatorTextBox.getText().substring(0,1);
        resultBox.append("Separator character changed to -> " + ns + "\n");
        separator = ns;
        resultBox.repaint();
    }//GEN-LAST:event_separatorTextBoxActionPerformed
    
    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_fileMenuActionPerformed
    
    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
// quit this Application
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed
    
    private void helpMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMenuActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_helpMenuActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jwsinvestigatorApp().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JCheckBox activeCheckBox;
    private javax.swing.JPanel communityPagePane;
    private javax.swing.JPanel communityPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTabbedPane objectTabbedPane;
    private javax.swing.JPanel portletPane;
    private javax.swing.JTextField pwd;
    private javax.swing.JTextArea resultBox;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JTable resultTable;
    private javax.swing.JScrollPane resultTablePane;
    private javax.swing.JButton runCommunityButton;
    private javax.swing.JButton runPageSearchButton;
    private javax.swing.JButton runPortletButton;
    private javax.swing.JButton runWSButton;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JFileChooser saveFileChooser;
    private javax.swing.JPanel selectorPanel;
    private javax.swing.JTextField separatorTextBox;
    private javax.swing.JScrollPane statusScrollPane;
    private javax.swing.JMenuBar topMenuBar;
    private javax.swing.JTextField uname;
    private javax.swing.JPanel wsPane;
    // End of variables declaration//GEN-END:variables
    
}
